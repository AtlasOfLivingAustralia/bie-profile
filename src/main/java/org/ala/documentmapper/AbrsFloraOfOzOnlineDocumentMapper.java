/**
 * Copyright (c) CSIRO Australia, 2009
 * All rights reserved.
 *
 * Original Author: hwa002
 * Last Modified By: $LastChangedBy: hwa002 $
 * Last Modified Info: $Id: AbrsFloraOfOzOnlineDocumentMapper.java 2114 2009-12-16 23:09:34Z hwa002 $
 */

package org.ala.documentmapper;

import java.util.List;

import org.ala.repository.ParsedDocument;
import org.ala.repository.Predicates;
import org.ala.repository.Triple;
import org.ala.util.MimeType;
import org.w3c.dom.Document;

/**
 * Document Mapper for ABRS's Flora of Australia Online.
 *
 * @author Tommy Wang (tommy.wang@csiro.au)
 */
public class AbrsFloraOfOzOnlineDocumentMapper extends XMLDocumentMapper {

	public AbrsFloraOfOzOnlineDocumentMapper() {

		setRecursiveValueExtraction(true);

		this.contentType = MimeType.HTML.toString();

		String subject = MappingUtils.getSubject();

		// Extracts the unique ID from supplied page.
		// Unique ID is assumed to be embedded inside a <meta> element
		// generated by Protocol Handler.
		// Location is a HTML <meta> tag in /html/head
		addDCMapping("//html/head/meta[@scheme=\"URL\" and @name=\"ALA.Guid\"]/attribute::content", subject, Predicates.DC_IDENTIFIER);

		// Extracts the entire taxon name string
		// According to TDWG's TaxonName standard
		// http://rs.tdwg.org/ontology/voc/TaxonName#nameComplete
		// "Every TaxonName should have a DublinCore:title property that contains
		// the complete name string including authors and year (where appropriate)."
		
		addDCMapping("//p[@class=\"name\"]", subject, Predicates.DC_TITLE);
		
		addDCMapping("//h3[@class=\"title\"]", subject, Predicates.DC_SUBJECT);
		
		addTripleMapping("//p[@class=\"name\"]/b[1]", subject, Predicates.GENUS);
		
		addTripleMapping("//p[@class=\"name\"]/b[2]", subject, Predicates.SPECIFIC_EPITHET);
		
		addTripleMapping("//p[@class=\"standard\"]|//p[@class=\"notes\"]", subject, Predicates.DESCRIPTIVE_TEXT);
		
		addTripleMapping("//p[@class=\"synonymy\"]", subject, Predicates.SYNONYM);


		setRecursiveValueExtraction(false);
		
		addTripleMapping("//p[@class=\"name\"]/i", subject, Predicates.PUBLISHED_IN);
		
		setRecursiveValueExtraction(true);


	} // End of default constructor.


	@Override
	protected void extractProperties(List<ParsedDocument> pds, Document xmlDocument) throws Exception {


		ParsedDocument pd = pds.get(0);
		List<Triple<String,String,String>> triples = pd.getTriples();
		
		String subject = MappingUtils.getSubject();
		
		String sciName = getTripleObjectLiteral(pds, "hasGenus") + " " + getTripleObjectLiteral(pds, "hasSpecificEpithet");
		
		triples.add(new Triple(subject, Predicates.SCIENTIFIC_NAME.toString(), sciName));
		triples.add(new Triple(subject, Predicates.KINGDOM.toString(), "Plantae"));
		
		pd.setTriples(triples);

	} // End of `postProcessProperties` method.
}
